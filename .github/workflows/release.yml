name: Release Extension

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v3.1.4)'
        required: true
        default: 'v3.1.4'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
        
    - name: Create Chrome extension package
      run: |
        node -e "
        const fs = require('fs');
        const archiver = require('archiver');
        
        const output = fs.createWriteStream('palestinian-domain-blocker-chrome.zip');
        const archive = archiver('zip');
        output.on('close', () => console.log('Chrome extension packaged successfully!'));
        archive.pipe(output);
        
        const files = ['manifest.json','background.js','popup.html','popup.js','blocked.html','blocked.js','dino-game.js','pixel-fonts.js','icons/','google-example/','README.md','LICENSE'];
        files.forEach(file => {
            if(fs.existsSync(file)) {
                if(fs.statSync(file).isDirectory()) {
                    archive.directory(file, file);
                } else {
                    archive.file(file, {name: file});
                }
            }
        });
        archive.finalize();
        "
        
    - name: Create Firefox extension package  
      run: |
        node -e "
        const fs = require('fs');
        const archiver = require('archiver');
        
        const output = fs.createWriteStream('palestinian-domain-blocker-firefox.zip');
        const archive = archiver('zip');
        output.on('close', () => console.log('Firefox extension packaged successfully!'));
        archive.pipe(output);
        
        const files = [
            {src: 'manifest-v2-firefox.json', dest: 'manifest.json'},
            {src: 'background-firefox.js', dest: 'background.js'},
            {src: 'popup.html', dest: 'popup.html'},
            {src: 'popup.js', dest: 'popup.js'},
            {src: 'blocked.html', dest: 'blocked.html'},
            {src: 'blocked.js', dest: 'blocked.js'},
            {src: 'dino-game.js', dest: 'dino-game.js'},
            {src: 'pixel-fonts.js', dest: 'pixel-fonts.js'},
            {src: 'README.md', dest: 'README.md'},
            {src: 'LICENSE', dest: 'LICENSE'}
        ];
        
        files.forEach(({src, dest}) => {
            if(fs.existsSync(src)) {
                archive.file(src, {name: dest});
            }
        });
        
        if(fs.existsSync('icons')) archive.directory('icons', 'icons');
        if(fs.existsSync('google-example')) archive.directory('google-example', 'google-example');
        
        archive.finalize();
        "
        
    - name: Get version info
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT  
          echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
          echo "Using tag from push: $TAG_NAME"
        elif [ -n "${{ github.event.inputs.version }}" ]; then
          INPUT_VERSION="${{ github.event.inputs.version }}"
          echo "tag_name=$INPUT_VERSION" >> $GITHUB_OUTPUT
          echo "version=${INPUT_VERSION#v}" >> $GITHUB_OUTPUT  
          echo "Using manual input: $INPUT_VERSION"
        else
          VERSION=$(node -p "require('./manifest.json').version")
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using manifest version: v$VERSION"
        fi
        
    - name: Create Release  
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Palestinian Domain Blocker ${{ steps.version.outputs.tag_name }}
        files: |
          palestinian-domain-blocker-chrome.zip
          palestinian-domain-blocker-firefox.zip
        body: |
          ## What's New in ${{ steps.version.outputs.tag_name }}

          - Repository cleanup and automated deployment system
          - Firefox Add-ons store submission with validation passing
          - Chrome dinosaur game with improved physics and collision detection
          - Automated release workflow for both Chrome and Firefox

          ### Installation

          **Firefox:**
          Install from [Firefox Add-ons Store](https://addons.mozilla.org/en-US/firefox/addon/palestinian-domain-blocker/)

          **Chrome/Edge:**
          1. Download `palestinian-domain-blocker-chrome.zip`
          2. Extract to folder
          3. Go to `chrome://extensions/`
          4. Enable Developer mode
          5. Click "Load unpacked" and select folder
        draft: false
        prerelease: false